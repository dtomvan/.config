exec xonassert.cfg

startall bx_ functions such as bx_inc and bx_dec

alias tester "s in ${1}; set out ${1}; s expected ${2}; ${testing_func} out; test_${testing_func}_step2 ${1-}"

start bx_inc
it increments a number
alias test_bx_inc_step2 "assert_eq out expected in should be incremented by 1, ${1} + 1 should be ${2}"
do tester 0 1
do tester 1 2
do tester 2 3
do tester 3 4
do tester 4 5
do tester 5 6
do tester 99999 100000
end

start bx_dec
it decrements a number
alias test_bx_dec_step2 "assert_eq out expected in should be decremented by 1, ${1} - 1 should be ${2}"
do tester 1 0
do tester 2 1
do tester 3 2
do tester 4 3
do tester 5 4
do tester 6 5
do tester 100000 99999
end

// Tests a gate (2 inputs, 1 expected value)
alias gate "set out \"\"; s in_1 ${1}; s in_2 ${2}; s expected ${3}; gate_step2 ${1-}"
alias gate_step2 "${testing_func} ${in_1} ${in_2} out; test_${testing_func}_step2 ${1-}"
start bx_or
it checks if either of the inputs are 1, or both
alias test_bx_or_step2 "assert_eq out expected bx_or should return in_1 | in_2, ${1} | ${2} should be ${3}"
do gate 0 0 0
do gate 1 0 1
do gate 0 1 1
do gate 1 1 1
end

start bx_nand
it checks if both inputs arent 1
alias test_bx_nand_step2 "assert_eq out expected bx_nand should return in_1 NAND in_2, ${1} NAND ${2} should be ${3}"
do gate 0 0 1
do gate 1 0 1
do gate 0 1 1
do gate 1 1 0
end

start bx_and
it checks if both inputs are 1
alias test_bx_and_step2 "assert_eq out expected bx_and should return in_1 & in_2, ${1} & ${2} should be ${3}"
do gate 0 0 0
do gate 1 0 0
do gate 0 1 0
do gate 1 1 1
end

start bx_xor
it checks if either of the inputs are 1, but not both
alias test_bx_xor_step2 "assert_eq out expected bx_xor should return in_1 ^ in_2, ${1} ^ ${2} should be ${3}"
do gate 0 0 0
do gate 1 0 1
do gate 0 1 1
do gate 1 1 0
end

alias rot "s in_1 ${1}; s in_2 ${2}; s in_3 ${3}; s out_1 ${4}; s out_2 ${5}; s out_3 ${6}; rot_step2 ${1-}"
alias rot_step2 "${testing_func} in_1 in_2 in_3; rot_step3 ${1-}"
alias rot_step3 "set rot_error \"bx_rot should rotate in_1, in_2 and in_3, ${1} ${2} ${3} ROT should be ${4} ${5} ${6}\"; rot_step4"
alias rot_step4 "assert_eq in_1 out_1 ${rot_error}; assert_eq in_2 out_2 ${rot_error}; assert_eq in_3 out_3 ${rot_error}"
start bx_rot
it rotates 3 values (rpn exch on steroids)
do rot 0 0 0 0 0 0
do rot 1 2 3 2 3 1
do rot 2 3 1 3 1 2
do rot 3 1 2 1 2 3
do rot 10 11 12 11 12 10
do rot 100 100 100 100 100 100
end

alias exch "s in_1 ${1}; s in_2 ${2}; s out_1 ${2}; s out_2 ${1}; exch_step2 ${1-}"
alias exch_step2 "${testing_func} in_1 in_2; exch_step3 ${1-}"
alias exch_step3 "set exch_error \"bx_exch should swap in_1 and in_2, bx_swap ${1} ${2} should be ${2} ${1}\"; exch_step4"
alias exch_step4 "assert_eq in_1 out_1 ${exch_error}; assert_eq in_2 out_2 ${exch_error}"
start bx_exch
it swaps 2 values (rpn exch on cvars)
do exch 0 1
do exch 1 2
do exch 2 3
do exch 3 4
do exch 4 5
do exch 5 6
do exch 99999 100000
end

endall

// vim:ft=bash:tw=0
