// assumption: bx_if_eq and bx_if_not_eq both work
// usage:
// exec xonassert.cfg
// testing_verbose 0 // or 1
// // prints a start header for all testing
// startall
// // start testing a specific function
// start <func_name>
// it <description of what it does>
// // the do command only executes when the test hasnt failed yet
// // use assert <error message> and assert_eq <cvar_1> <cvar_2> <error message>
// // if the assertion fails, the errormessage will print and any further do commands
// // in this test will not run
// // wrapper for set, but prints a message when testing_verbose is 1.
// s this that
// do something something
// // prints an end header for the current test, along with if it failed or not
// end
// // prints an end header for all testing
// endall
// cvars:
// testing_func will be set to the current function that is being tested
// _testing_success is either 0 or 1, depending on if the current test has failed yet.

set _xonassert_loaded 1
// code //
// bx_if statements from forums.xonotic.org
set bx_if_var_ ""
alias bx_if "bx_if_var_ ${1}; toggle bx_if_var_; alias bx_if_action0_ ${2-}; alias bx_if_action1_ bx_noop; bx_if_do_"
alias bx_if_not "bx_if_var_ ${1}; toggle bx_if_var_; toggle bx_if_var_; alias bx_if_action0_ ${2-}; alias bx_if_action1_ bx_noop; bx_if_do_"
alias bx_if_do_ "bx_if_action${bx_if_var_}_"

alias bx_if_eq "bx_if_eq_init ${1-}; bx_if_eq_do_";
alias bx_if_not_eq "bx_if_eq_init ${1-}; bx_if_not_eq_do_";

alias bx_if_eq_init "bx_if_eq_step1_ ${1-}; bx_if_eq_step2_"
alias bx_if_eq_step1_ "rpn /bx_if_eq_var1_ \"/${1}\" /SHA256 digest =; rpn /bx_if_eq_var2_ \"/${2}\" /SHA256 digest =; alias bx_if_eq_action_ ${3- q}"
alias bx_if_eq_step2_ "set bx_if_eq_resultvar_ \"bx_if_eq_var_${bx_if_eq_var1_}_\"; set bx_if_eq_var_${bx_if_eq_var1_}_ 0; set bx_if_eq_var_${bx_if_eq_var2_}_ 1"

alias bx_if_eq_do_ "bx_if ${$bx_if_eq_resultvar_} bx_if_eq_action_";
alias bx_if_not_eq_do_ "bx_if_not ${$bx_if_eq_resultvar_} bx_if_eq_action_";

// my code
bx_if_eq _can_test 0 echo ^3Warning: you didnt _endall_ your tests.
set testing_func "NOT_TESTING"
set _can_test 0
set _testing_success 0

alias do "bx_if ${_testing_success} ${1-}"

alias cannot_test "echo All tests have concluded. Cannot test anymore."

alias assert "bx_if_not ${$1} assertion_failed ${1-}"
alias assert_eq "bx_if_not_eq ${$1} ${$2} assertion_failed ${1} (${$1}) == ${2} (${$2}): ${3-}"
alias assertion_failed "bx_if ${_can_test} _assertion_failed ${1-}; bx_if_not ${_can_test} cannot_test"
alias _assertion_failed "echo Assertion failed: ${1-}; _testing_success 0"

alias start "bx_if ${_can_test} _start ${1-}; bx_if_not ${_can_test} cannot_test"
alias _start "test_should_be_closed; echo ---; echo ^2Testing function ${1}; set testing_func ${1}; _testing_success 1"
alias it "bx_if ${_can_test} _it ${1-}; bx_if_not ${_can_test} cannot_test"
alias _it "test_should_have_started; echo it ${1-}"
alias s "bx_if ${testing_verbose ?} echo ${1} = ${2}; set ${1} ${2}"

alias startall "bx_if ${_can_test} spurious_startall; bx_if_not ${_can_test} _startall ${1-}"
alias _startall "_can_test 1; echo ==========; echo ==========; echo Started testing ${1- ?}"
alias spurious_startall "^3Warning: startall was called twice"
alias end "test_should_have_started; evaluate_test; echo ---; testing_func NOT_TESTING; _testing_success 0"
alias endall "echo ^4Done testing; echo ==========; echo ==========; _can_test 0; test_should_be_closed"
alias evaluate_test "bx_if ${_testing_success} echo ^4Done testing function ${testing_func}; bx_if_not ${_testing_success} echo ^1Testing function ${testing_func} failed"
alias test_should_have_started "bx_if_eq ${testing_func} NOT_TESTING echo ^3Warning: you didn't specify a testing_func. Call start first."
alias test_should_be_closed "bx_if_not_eq ${testing_func} NOT_TESTING echo ^3Warning: you didn't end the ${testing_func} test."

// vim:ft=bash:tw=0
