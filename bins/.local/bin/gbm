#!/usr/bin/env bash

set -euo pipefail

GIT_COLOR="#f14e32"

git_color_text() {
    gum style --foreground "$GIT_COLOR" "$1"
}

get_branches() {
    if [ ${1+x} ]; then
        git branch --format='%(refname:short)' | xargs gum choose --selected.foreground="$GIT_COLOR" --limit="$1"
    else
        git branch --format='%(refname:short)' | xargs gum choose --selected.foreground="$GIT_COLOR" --no-limit
    fi
}

if ! git rev-parse --git-dir >/dev/null 2>&1; then
    echo "$(git_color_text "!!") Must be run in a $(git_color_text 'git') repo"
    exit 1
fi

gum style \
    --border normal \
    --margin "1" \
    --padding "1" \
    --border-foreground "$GIT_COLOR" \
    "$(git_color_text 'Ôêò Git') Branch Manager"

echo "Choose $(git_color_text 'branches') to operate on:"
branches=$(get_branches)

echo ''
echo "Choose a $(git_color_text "command"):"
command=$(gum choose --cursor.foreground="$GIT_COLOR" rebase delete update merge)
echo ''

echo "$branches" | tr " " "\n" | while read -r branch; do
    case $command in
    rebase)
        base_branch=$(get_branches 1)
        gum confirm "Are you sure you want to rebase origin/$base_branch?"
        git fetch origin
        git switch "$branch"
        git rebase "origin/$base_branch"
        ;;
    merge)
        base_branch=$(get_branches 1)
        gum confirm "Are you sure you want to merge origin/$base_branch?"
        git fetch origin
        git switch "$branch"
        git merge "origin/$base_branch"
        ;;
    delete)
        gum confirm "Are you sure you want to delete $branch?"
        git branch -d "$branch" || gum confirm "Branch in use, try -D?" && git branch -D "$branch"
        ;;
    update)
        gum confirm "Are you sure you want to fast-forward $branch?"
        git checkout "$branch"
        git pull --ff-only
        ;;
    esac
done
